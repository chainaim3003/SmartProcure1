/**
 * AtomicMarketplaceEscrowV4 Integration Service - Using Official AlgoKit Client
 * 
 * This service uses the typed client generated by AlgoKit for type-safe interactions
 */
import { AlgorandClient } from '@algorandfoundation/algokit-utils'
import { AtomicMarketplaceEscrowV4Client } from '../../../atitans1-contracts/smart_contracts/artifacts/atomic_marketplace_escrow_v4/AtomicMarketplaceEscrowV4Client'

// V4 Contract App ID from deployment
const V4_ESCROW_APP_ID = 746780258

export interface CreateTradeParams {
  sellerAddress: string
  amount: number // In microAlgos or microUSDC
  productType: string
  description: string
  ipfsHash: string
  senderAddress: string
  signer: any
}

export interface TradeResult {
  tradeId: number
  txId: string
  explorerUrl: string
  confirmedRound: number
}

class EscrowV4ServiceAlgoKit {
  private appId = V4_ESCROW_APP_ID
  private algorand: AlgorandClient
  private client: ReturnType<typeof AlgorandClient.prototype.client.getTypedAppClientById<typeof AtomicMarketplaceEscrowV4Client>> | null = null

  constructor() {
    // Initialize AlgorandClient for TestNet
    this.algorand = AlgorandClient.testNet()
  }

  /**
   * Initialize the typed client with a signer
   */
  private async getClient(senderAddress: string, signer: any) {
    if (!this.client) {
      this.client = this.algorand.client.getTypedAppClientById(AtomicMarketplaceEscrowV4Client, {
        appId: BigInt(this.appId),
        defaultSender: senderAddress,
        defaultSigner: signer,
      })
    }
    return this.client
  }

  /**
   * Create a trade listing using the typed client
   */
  async createTradeListing(params: CreateTradeParams): Promise<TradeResult> {
    console.log('üìù Creating trade in V4 Escrow contract:', {
      appId: this.appId,
      seller: params.sellerAddress,
      amount: params.amount,
      description: params.description,
    })

    try {
      // Get the typed client
      const client = await this.getClient(params.senderAddress, params.signer)

      // Call createTrade method using typed client
      const result = await client.send.createTrade({
        args: [
          params.sellerAddress,
          BigInt(params.amount),
          params.productType,
          params.description,
          params.ipfsHash,
        ],
        populateAppCallResources: true, // Automatically populate box references
      })

      // Extract trade ID from return value
      const tradeId = Number(result.return?.valueOf() || 0)
      const txId = result.txIds[0]

      console.log('‚úÖ Trade created successfully:', {
        tradeId,
        txId,
        confirmedRound: result.confirmations?.[0]?.confirmedRound,
      })

      return {
        tradeId,
        txId,
        explorerUrl: `https://testnet.algoexplorer.io/tx/${txId}`,
        confirmedRound: Number(result.confirmations?.[0]?.confirmedRound || 0),
      }
    } catch (error) {
      console.error('‚ùå Error creating trade:', error)
      throw new Error(`Failed to create trade: ${error instanceof Error ? error.message : String(error)}`)
    }
  }

  /**
   * Get contract global state
   */
  async getContractState(): Promise<{
    nextTradeId: number
    settlementCurrency: number
    platformTreasury: string
  }> {
    try {
      const algodClient = this.algorand.client.algod
      const appInfo = await algodClient.getApplicationByID(this.appId).do()
      const globalState = appInfo.params.globalState || []

      // Parse global state
      const state: any = {}
      globalState.forEach((item: any) => {
        const key = Buffer.from(item.key, 'base64').toString()
        state[key] = item.value
      })

      return {
        nextTradeId: state.nextTradeId?.uint || 0,
        settlementCurrency: state.settlementCurrency?.uint || 0,
        platformTreasury: state.platformTreasury?.bytes 
          ? Buffer.from(state.platformTreasury.bytes, 'base64').toString('hex') 
          : '',
      }
    } catch (error) {
      console.error('Error reading contract state:', error)
      throw error
    }
  }

  /**
   * Check if contract is initialized
   */
  async isInitialized(): Promise<boolean> {
    try {
      const state = await this.getContractState()
      return state.nextTradeId > 0
    } catch {
      return false
    }
  }

  /**
   * Get trade details by ID
   */
  async getTrade(tradeId: number) {
    try {
      // This would use the typed client to call getTrade
      // For now, return a placeholder
      console.log('Getting trade:', tradeId)
      // Implementation would use client.getTrade()
      return null
    } catch (error) {
      console.error('Error getting trade:', error)
      throw error
    }
  }

  getAppId(): number {
    return this.appId
  }
}

export const escrowV4ServiceAlgoKit = new EscrowV4ServiceAlgoKit()
